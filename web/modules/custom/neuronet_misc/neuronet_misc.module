<?php

/**
 * @file
 * Contains neuronet_misc.module.
 *
 * - The contents of this file are solely Drupal procedural hooks. Some hooks
 *   call on helper functions in /inc/helpers.php.
 * - Drupal hooks are an old approach to "event subscribers": Something happens
 *   (e.g. a profile is created), and these hooks are fired, allowing for a
 *   custom response to be written (e.g. a user is converted to an alumni role).
 * - This is code that glues NeuroNet together.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;

use Drupal\neuronet_misc\Service\CompletedFields;

require_once __DIR__ . '/inc/helpers.php';

/**
 * Implements hook_help().
 */
function neuronet_misc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the neuronet_misc module.
    case 'help.page.neuronet_misc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Adds miscellaneous functionality to the NeuroNet website') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function neuronet_misc_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // In alumni view, remove duplicate job positions.
  // if($view->id() == 'alumni'){
  //   $indexes_to_remove = array();
  //   foreach($view->result as $value){
  //     // it is VERY annoying to get entity reference values in Drupal 8
  //     $nid = $value->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
  //     $start_date = $value->_entity->get('field_start_date')->value;
  //     $index = 0;
  //     foreach($view->result as $value2){
  //       $sub_nid = $value2->_entity->get('field_profile')->first()->get('entity')->getTarget()->getValue()->get('nid')->value;
  //       if ($nid == $sub_nid) {
  //         $start_date = $value->_entity->get('field_start_date')->value;
  //         $start_date2 = $value2->_entity->get('field_start_date')->value;
  //         if (date($start_date2) < date($start_date)) {
  //           $indexes_to_remove[] = $index;
  //         }
  //       }
  //       $index++;
  //     }
  //   }
  //   foreach ($indexes_to_remove as $index){
  //     unset($view->result[$index]);
  //   }
  // }
  // Respond to Send Custom Email action processing in NeuroNet Manager's people
  // view.
  // - Upon completion of the batch process that sends emails from the manager's
  //   administrative view of people, this logic fires.
  // - It:
  //    - Creates a record of the mass email.
  //    - Sets a message for the manager.
  //    - Deletes the private key-value store with the batch process data.
  if ($view->id() == 'current_students') {
    $tempstore = \Drupal::service('tempstore.private');
    // Get the store collection.
    $store = $tempstore->get('neuronet_misc');
    $sent_email_data = $store->get('sent_email_data');
    if (!empty($sent_email_data)) {
      $email_sent = $sent_email_data['email_sent'];
      // Get sender profile ID.
      $sender_profile = \Drupal::entityTypeManager()
        ->getStorage('user')
        ->load(\Drupal::currentUser()->id());
      // Create & save email node.
      $email = \Drupal::entityTypeManager()->getStorage('node')->create([
        'type' => 'email',
        'title' => $email_sent['name'] . ' -- ' . time(),
        'field_email_name' => $email_sent['name'],
        'field_subject' => $email_sent['subject'],
        'body' => [
          'value' => $email_sent['email']['value'],
          'format' => 'full_html',
        ],
        'field_sender' => $sender_profile->get('field_profile')->target_id,
        'field_people_emailed' => $sent_email_data['recipient_nids'],
      ]);
      // Set Drupal message for email recipients.
      \Drupal::messenger()->addStatus(t('The "@name" email was sent to: @recipients', [
        '@recipients' => rtrim($sent_email_data['recipient_names'], ', '),
        '@name' => $email_sent['name'],
      ]));
      // Set Drupal message for disabled recipients.
      if (!empty($sent_email_data['disabled_recipient_names'])) {
        \Drupal::messenger()->addStatus(t('The "@name" email was *not* send to the following users
          due to their turning off notifications: @recipients', [
          '@recipients' => rtrim($sent_email_data['disabled_recipient_names'], ', '),
          '@name' => $email_sent['name'],
        ]));
      }
      $email->save();
      $store->delete('sent_email_data');
    }
  }
}

/**
 * Implements hook_preprocess_page()
 */
function neuronet_misc_preprocess_page(&$variables /*, RouteMatchInterface $route_match*/){
  // On every page load, include the styles & scripts necessary for the custom
  // NeuroNet code.
  $variables['#attached']['library'][] = 'neuronet_misc/neuronet_misc';
}

/**
 * Implements hook_node_access()
 */
function neuronet_misc_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Control access to editing profiles.
  // - If a user has an associated profile, and if the profile being edited
  //   belongs to that user: YES
  // - If a user is a NeuroNet manager, site administrator, or super user: YES.
  if ($node->getType() == 'profile' && $op == 'update') {
    $user = User::load($account->id());
    if (!$user->get('field_profile')->isEmpty() && $node->id() == $user->get('field_profile')->target_id) {
      return new AccessResultAllowed();
    }
    if (($user->hasRole('deputy_admin') || $user->hasRole('administrator')) && $node->id() != 1) {
      return new AccessResultAllowed();
    }
  }
  // Prevent alumni from seeing Profiles.
  if ($node->getType() == 'profile' && $op == 'view') {
    $user = User::load($account->id());
    if (!$user->hasRole('deputy_admin') && $user->hasRole('alumni')) {
      if ($node->id() != $user->get('field_profile')->target_id && (int) $node->get('field_alumni')->value === 0) {
        //return new AccessResultForbidden();
      }
      elseif ((int) $node->get('field_alumni')->value === 1) {
        return new AccessResultAllowed();
      }
    }
  }
}

/**
 * Implements hook_block_access()
 */
function neuronet_misc_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
  // Don't allow admins to see a redundant alumni profile block.
  if ($block->id() == "views_block__single_profile_block_4") {
    $user = User::load(\Drupal::currentUser()->id());
    if ($user->hasRole('administrator') || $user->hasRole('deputy_admin')) {
      return new AccessResultForbidden();
    }
  }
}
function neuronet_misc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Disable certain profile fields for non-admins.
  // - If not a site admin:
  //    - Disable revision information c.
  //    - Disable email.
  // - If not an admin AND not a NeuroNet manager:
  //    - Disable the alumni checkbox.
  if ($form_id == 'node_profile_edit_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['revision_information']['#access'] = False;
      $form['field_email']['#access'] = False;
    }
    if (!$user->hasRole('administrator') && !$user->hasRole('deputy_admin')) {
      $form['field_alumni']['#disabled'] = TRUE;
      $form['field_alumni']['widget']['value']['#description'] = t('Only an administrator can change alumni status.');
    }
  }
  // Disable certain user form fields for non-admins.
  // - If not a site admin:
  //    - Disable profile reference field.
  //    - Disable picture field. There's already a picture field in profile.
  if ($form_id == 'user_form') {
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator')) {
      $form['field_profile']['#access'] = False;
      unset($form['contact']);
      $form['user_picture']['#access'] = False;
    }
  }
  // For the create profile form (which only admins can access):
  // - Set a custom validation function (e.g. checks email existence in system).
  // - Set a custom submit handler (which redirects the manager back to the
  //   create person form.)
  if ($form_id == 'node_profile_form') {
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    if ($path_args[2] == 'neuronet'){
      $form['actions']['submit']['#submit'][] = '_neuronet_misc_profile_submit';
      $form['#validate'][] = '_neuronet_misc_profile_validate';
    }
  }
  // Set default values for new Job history item for an alumni.
  // - Title will be automatically set as a random hash.
  // - Sets default profile association based on a ?profile= query parameter in
  //   the URL. Redirects if that query parameter does not exist.
  if ($form_id == 'node_job_form') {
    $form['title']['widget'][0]['value']['#default_value'] = sha1(md5(rand(0,10)));
    if ($profile_id = \Drupal::request()->query->get('profile')) {
      $form['field_profile']['widget'][0]['target_id']['#default_value'] = \Drupal::entityManager()->getStorage('node')->load($profile_id);
    }
    else {
      $url = \Drupal::request()->headers->get('referer') ? \Drupal::request()->headers->get('referer') : \Drupal::request()->query->get('destination');
      $form['#access'] = FALSE;
      $form['#markup'] = '';
      \Drupal::messenger()->addWarning(t('You must add to the job history from a profile page.'));
      if ($url) {
        $response = new TrustedRedirectResponse($url);
        $response->send();
        exit();
      }
    }
  }
  // Disable certain job history item fields for non-admins --> for both
  // creation & edit forms.
  // - If not a site admin:
  //    - Disable title.
  // - If not a site admin AND not a NeuroNet manager:
  //    - Disable profile association.
  //    - Disable last updated. This is set automatically.
  if ($form_id == 'node_job_form' || $form_id == 'node_job_edit_form') {
    $form['field_last_']['widget'][0]['value']['#default_value'] = DrupalDateTime::createFromTimestamp(time());
    $user = User::load(\Drupal::currentUser()->id());
    if (!$user->hasRole('administrator') && !$user->hasRole('deputy_admin')) {
      $form['field_profile']['#access'] = FALSE;
      $form['field_last_']['#access'] = FALSE;
    }
    if (!$user->hasRole('administrator')) {
      $form['title']['#access'] = FALSE;
    }
  }

  // Always set the default value of Send Email Notifications checkbox to false.
  if ($form_id == 'node_job_posting_form' || $form_id == 'node_job_posting_edit_form') {
    $form['field_send_email_notifications']['widget']['value']['#default_value'] = FALSE;
    $form['actions']['submit']['#submit'][] = '_neuronet_misc_redirect_job_posting';
  }
}

/*
 *  Implements hook_mail_alter()
 *
 *  This function stops all emails from being sent from my development environment
 *  I took it from http://www.jaypan.com/tutorial/preventing-emails-being-sent-drupal-7-development-environment
*/
function neuronet_misc_mail_alter(&$message){
  // We don't want to send emails if the variable has not been set, or if it has been set and is TRUE.
  // We can use variable_get() to get the $conf variable set in our settings.php file
  // Note that by setting the default to TRUE, the default setting for the system is to be
  // a development environment. Set this to FALSE to have the default be a live environment.
  if (!defined('MED_SERVER')) {
    // First: Prevent the mail from being sent
    $message['send'] = FALSE;
    // Next: Log the mail so it can be debugged if necessary
    $notice = 'The following email was not sent: <pre> <br/>Subject: ' .  $message['subject'] . '<br/>' . implode('', $message['body']) . '</pre>';
    \Drupal::logger('neuronet_misc')->notice($notice);
  }
}

/**
 * Implements hook_mail()
 */
function neuronet_misc_mail($key, &$message, $params) {
  // Make sure all emails use HTML Headers. Allows for sleek, rich text emails.
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  // Set values for a custom email created by NeuroNet managers.
  if ($key == 'custom') {
    // Replace first name.
    $subject = $params['subject'];
    $body = $params['body'];
    $subject = preg_replace('/(%%%FIRSTNAME%%%)/i', $params['profile']->get('field_first_name')->value, $subject);
    $body = preg_replace('/(%%%FIRSTNAME%%%)/i', $params['profile']->get('field_first_name')->value, $body);
    // Replace last name.
    $subject = preg_replace('/(%%%LASTNAME%%%)/i', $params['profile']->get('field_last_name')->value, $subject);
    $body = preg_replace('/(%%%LASTNAME%%%)/i', $params['profile']->get('field_last_name')->value, $body);
    // Replace login link.
    if ($params['user']->id() != 1) {
      $login_url = user_pass_reset_url($params['user']);
      $body = preg_replace('/(%%%LOGINLINK%%%)/i', $login_url, $body);
    }
    $message['subject'] = $subject;
    $message['body'][] = $body;
  }
  // Set values for a job posting notification.
  elseif ($key === 'job_posting_notification') {
    $message['body'][] = \Drupal::service('renderer')->render($params['notification_render_array']);
    $message['subject'] = $params['subject'];
  }
  // Set values for any other email.
  else {
    $message['subject'] = $params['action_values']['subject'];
    $message['body'][] = $params['action_values']['body'];
  }

}

/**
 * Implements hook_entity_update()
 */
function neuronet_misc_entity_update(EntityInterface $entity) {
  // Update profile email whenever a user is updated.
  // - Note: Profiles are content, whereas users are not. They are different.
  //   Users have an associated profile.
  if ($entity->getEntityTypeId() == 'user') {
    $user = User::load($entity->id());
    $connection = \Drupal::database();
      $query = $connection->query("SELECT field_profile_target_id FROM {user__field_profile} WHERE entity_id = :entity_id", [':entity_id' => $entity->id()]);
      $result = $query->fetchAll();
    if (!empty($result)) {
      $nid = $result[0]->field_profile_target_id;
      if ($node = \Drupal::entityTypeManager()->getStorage('node')->load($nid)) {
        $new_email = $user->getEmail();
        $node->set('field_email', $new_email);
        $node->save();
      }
    }

  }
}

/**
 * Implements hook_node_insert()
 */
function neuronet_misc_node_insert($node) {
  _neuronet_misc_set_job_posting_temp_store($node);
  // Create a new user when a new profile is created.
  // - Extract email, name, & role from profile & set those as user values.
  if ($node->getType() == 'profile') {
    $email = $node->get('field_email')->getString();
    $name = $node->get('field_first_name')->getString() . ' ' . $node->get('field_last_name')->getString();
    $nid = $node->id();
    //Create a User
    $user = User::create();
    //Mandatory settings
    $user->setPassword(user_password());
    $user->enforceIsNew();
    $user->setEmail($email);
    $user->set('field_profile', $nid);
    $user->setUsername($name);//This username must be unique and accept only a-Z,0-9, - _ @ .
    $user->activate();
    if ($node->get('field_alumni')->value) {
      $user->addRole('alumni');
    }
    else {
      $user->addRole('current_student');
    }
    //Set Language
    $language_interface = \Drupal::languageManager()->getCurrentLanguage();
    $user->set('langcode', $language_interface->getId());
    $user->set('preferred_langcode', $language_interface->getId());
    $user->set('preferred_admin_langcode', $language_interface->getId());
    // Save.
    $user->save();

    // Set completed fields.
    /** @var CompletedFields $completed_fields_service */
    $completed_fields_service = \Drupal::service('neuronet_misc.completed_fields');
    $completed_fields_service->saveCompletedFields($node);
  }
}

/**
 * Implements hook_node_update()
 */
function neuronet_misc_node_update(EntityInterface $node) {
  _neuronet_misc_set_job_posting_temp_store($node);
  // Add alumni role to users associated w/ profiles set to alumni.
  // Remove alumni role from users associated w/ profiles not set to alumni.
  if ($node->getType() == 'profile') {
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties([
      'field_profile' => $node->id(),
    ]);
    if ($user = reset($users)) {
      if ($node->get('field_alumni')->value && !$user->hasRole('alumni')) {
        $user->addRole('alumni');
        $user->removeRole('current_student');
        $user->save();
        \Drupal::messenger()->addWarning(t('NOTE: To be viewable as an alumni to others in the system, you must go to your profile and add at least one entry in your job history.'));
      }
      elseif (!$node->get('field_alumni')->value && $user->hasRole('alumni')) {
        $user->removeRole('alumni');
        $user->addRole('current_student');
        $user->save();
      }
    }
    // Set completed fields.
    /** @var CompletedFields $completed_fields_service */
    $completed_fields_service = \Drupal::service('neuronet_misc.completed_fields');
    $completed_fields_service->saveCompletedFields($node);
  }
}

/**
 * Implements hook_user_login().
 */
function neuronet_misc_user_login(AccountInterface $account) {
  // Redirect login to either Current Students view or User page.
  $roles = $account->getRoles();
  if (\Drupal::routeMatch()->getRouteName() != 'user.reset.login') {
    if (in_array('current_student', $roles) || in_array('administrator', $roles)) {
      $response = new RedirectResponse(\Drupal::url('view.current_students.page_1'));
      return $response->send();
    }
    else {
      $response = new RedirectResponse(\Drupal::url('user.page'));
      return $response->send();
    }
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function neuronet_misc_js_settings_alter(&$settings, AttachedAssetsInterface $assets) {
  // Add path prefix if the baseUrl is not empty.
  // - This is because this path prefix acts weird when the site is on a
  //   subdomain (e.g. /neuronet is the homepage).
  $base_url = \Drupal::requestStack()->getMasterRequest()->getBaseUrl();
  if (!empty($settings['path']) && empty($settings['path']['pathPrefix']) && !empty(ltrim($base_url, '/'))) {
    $settings['path']['pathPrefix'] = substr(ltrim($base_url, '/'), -1) == '/' ? ltrim($base_url, '/') : ltrim($base_url, '/') . '/';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function neuronet_misc_module_implements_alter(&$implementations, $hook) {
  // Move NeuroNet Misc to the end of the implementation execution order
  // for the 'js_settings_alter' hook.
  if ($hook == 'js_settings_alter') {
    $group = $implementations['neuronet_misc'];
    unset($implementations['neuronet_misc']);
    $implementations['neuronet_misc'] = $group;
  }
}

/**
 * Implements hook_theme()
 */
function neuronet_misc_theme($existing, $type, $theme, $path) {
  return [
    // Register the job posting notification theme hook.
    // - This allows for the job-posting-notification.html.twig file to be used
    //   as the HTML template for the job notification email.
    // - This also enables
    //   \Drupal::service('renderer')->render($params['notification_render_array'])
    //   to work, because it's '#theme' is set to 'job_posting_notification'.
    'job_posting_notification' => [
      'variables' => [
        'title' => null,
        'first_name' => null,
        'job_url' => null,
        'description' => null,
      ],
    ]
  ];
}